"""
This is made to have a terminal based minesweeper game

Author: 0xDarkStar
"""

import mine_logic
import reveal_funcs

# A 30x16 gameboard holding where mines are and the number of nearby mines
gameboard = [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
             [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]]

# Holds all the values to know what the player can and can't see, as well as what they've flagged.
gameboardState = [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
                  [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]]

letterToInteger = {"a":0, "b":1, "c":2, "e":3, "f":4, "g":5, "h":6, "i":7, "j":8, "k":9, "l":10, "m":11, "n":12, "o":13, "p":14, "q":15}

def main():
    y = 0
    for i in gameboard: # Go through entire gameboard
        x = 0
        for ii in i:
            gameboard[y][x] = "C" # Clear
            x += 1
        y += 1
    y = 0
    for i in gameboard: # Go through entire gameboard
        x = 0
        for ii in i:
            gameboardState[y][x] = "H" # Hidden
            x += 1
        y += 1
    text()

def text():
    text = input("What space do you want to start on? ").lower()
    startCoord = []
    letter = False
    Num1 = False
    Num2 = False
    for i in text:
        if i in list(letterToInteger.keys()) and letter == False:
            startCoord.append(letterToInteger[i])
            letter = True
        try:
            if int(i) > 0 and int(i) < 4 and Num1 == False:
                startCoord.append(int(i))
                Num1 = True
            elif int(i) >= 0 and int(i) < 10 and Num2 == False:
                if Num1 == False:
                    if int(i) == 0:
                        i = "1"
                    startCoord.append(int(i)-1)
                    Num1 = True
                    Num2 = True
                else:
                    startCoord[1] = (startCoord[1]*10)+int(i)-1
                    Num2 = True
        except ValueError:
            pass
        if letter == True and Num1 == True and Num2 == True:
            break
    print(startCoord)
    gameboard[startCoord[0]][startCoord[1]], gameboardState[startCoord[0]][startCoord[1]] = "S" # Add starting position
    if len(startCoord) < 2:
        print("No starting space was given.")
    mine_logic.add_mines(gameboard) # Add the mines
    mine_logic.add_nearby_mines_number(gameboard) # Find nearby mines and count them
    print(gameboard)
    print(gameboardState)

main()
